<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ndbx formatVersion="21" type="file" uuid="7a1bd40d-2dab-4808-85fa-ef49d8bf7f59">
    <property name="canvasHeight" value="1000"/>
    <property name="canvasWidth" value="1000"/>
    <property name="canvasX" value="0"/>
    <property name="canvasY" value="0"/>
    <node name="root" prototype="core.network" renderedChild="translate1">
        <node name="align1" position="-8.00,7.00" prototype="corevector.align">
            <port name="halign" type="string" value="right"/>
        </node>
        <node name="align2" position="-4.00,7.00" prototype="corevector.align">
            <port name="halign" type="string" value="right"/>
        </node>
        <node name="colorize1" position="-9.00,5.00" prototype="corevector.colorize">
            <port name="fill" type="color" value="#ed0000ff"/>
        </node>
        <node name="colorize2" position="-6.00,5.00" prototype="corevector.colorize">
            <port name="fill" type="color" value="#00b500ff"/>
        </node>
        <node comment="combine these values" name="combine1" position="0.00,6.00" prototype="list.combine"/>
        <node comment="magni greater than" name="compare1" position="1.00,-4.00" prototype="math.compare">
            <port name="comparator" type="string" value="&gt;"/>
        </node>
        <node comment="compare if the multiplyed value is more than 500" name="compare2" position="-9.00,0.00" prototype="math.compare">
            <port name="value2" type="float" value="500.0"/>
            <port name="comparator" type="string" value="&gt;"/>
        </node>
        <node comment="compare if the multiplyed value is less than 500" name="compare3" position="-6.00,0.00" prototype="math.compare">
            <port name="value2" type="float" value="500.0"/>
        </node>
        <node comment="count n of values that is not 0" name="count1" position="3.00,1.00" prototype="list.count"/>
        <node comment="get list and compare with greater than, return values that are not 0" name="cull1" position="-3.00,-2.00" prototype="list.cull"/>
        <node comment="get the name from the list, where the value is not 0" name="cull2" position="-1.00,0.00" prototype="list.cull"/>
        <node comment="get position in list where value is more than 500" name="cull3" position="-9.00,2.00" prototype="list.cull"/>
        <node comment="get position in list where value is less than 500" name="cull4" position="-6.00,2.00" prototype="list.cull"/>
        <node comment="get items from list were value is between 0 and 500" name="cull5" position="0.00,3.00" prototype="list.cull"/>
        <node comment="get items from list were value is more then 500" name="cull6" position="-3.00,3.00" prototype="list.cull"/>
        <node comment="divide to get °" name="divide1" position="3.00,3.00" prototype="math.divide">
            <port name="value1" type="float" value="360.0"/>
        </node>
        <node comment="create ellipse" name="ellipse1" position="7.00,6.00" prototype="corevector.ellipse">
            <port name="position" type="point" value="-2.71,2.71"/>
            <port name="width" type="float" value="2000.0"/>
            <port name="height" type="float" value="2000.0"/>
        </node>
        <node comment="import csv" name="import_csv1" position="-2.00,-6.00" prototype="data.import_csv">
            <port name="file" type="string" value="historicaltsunamieve-historical-tsunami-event-QueryResult.csv"/>
        </node>
        <node comment="lookup location" name="lookup1" position="5.00,-4.00" prototype="data.lookup">
            <port name="key" type="string" value="location_n"/>
        </node>
        <node comment="lookup magnitude" name="lookup3" position="-3.00,-4.00" prototype="data.lookup">
            <port name="key" type="string" value="eq_magnitu"/>
        </node>
        <node comment="multiply outcome range to the divided (360) to get each ° for individual list item" name="multiply1" position="4.00,5.00" prototype="math.multiply"/>
        <node comment="Multiply these values to create larger bars" name="multiply2" position="-7.00,-2.00" prototype="math.multiply">
            <port name="value2" type="float" value="76.0"/>
        </node>
        <node comment="get range from 0 to count" name="range1" position="6.00,3.00" prototype="math.range"/>
        <node name="rect1" position="-6.00,3.00" prototype="corevector.rect">
            <port name="height" type="float" value="5.0"/>
        </node>
        <node name="rect2" position="-9.00,3.00" prototype="corevector.rect">
            <port name="height" type="float" value="5.0"/>
        </node>
        <node name="resample1" position="7.00,7.00" prototype="corevector.resample">
            <port name="method" type="string" value="amount"/>
        </node>
        <node comment="rotate the list items based on the ° given bij the multiply outcome" name="rotate1" position="0.00,7.00" prototype="corevector.rotate"/>
        <node name="textpath1" position="0.00,4.00" prototype="corevector.textpath">
            <port name="align" type="string" value="LEFT"/>
        </node>
        <node name="textpath2" position="-3.00,5.00" prototype="corevector.textpath">
            <port name="font_name" type="string" value="Zimbra-Bold"/>
            <port name="align" type="string" value="LEFT"/>
        </node>
        <node comment="translate everything to desired outcome" name="translate1" position="3.00,9.00" prototype="corevector.translate"/>
        <conn input="resample1.shape" output="ellipse1"/>
        <conn input="divide1.value2" output="count1"/>
        <conn input="range1.end" output="count1"/>
        <conn input="multiply1.value1" output="range1"/>
        <conn input="multiply1.value2" output="divide1"/>
        <conn input="rotate1.angle" output="multiply1"/>
        <conn input="translate1.shape" output="rotate1"/>
        <conn input="translate1.translate" output="resample1"/>
        <conn input="resample1.points" output="count1"/>
        <conn input="combine1.list2" output="align1"/>
        <conn input="combine1.list1" output="textpath1"/>
        <conn input="rotate1.shape" output="combine1"/>
        <conn input="compare1.value1" output="lookup3"/>
        <conn input="count1.list" output="cull1"/>
        <conn input="multiply2.value1" output="cull1"/>
        <conn input="lookup3.list" output="import_csv1"/>
        <conn input="lookup1.list" output="import_csv1"/>
        <conn input="cull2.list" output="lookup1"/>
        <conn input="cull2.booleans" output="compare1"/>
        <conn input="compare2.value1" output="multiply2"/>
        <conn input="cull1.list" output="lookup3"/>
        <conn input="cull3.booleans" output="compare2"/>
        <conn input="cull3.list" output="multiply2"/>
        <conn input="colorize1.shape" output="rect2"/>
        <conn input="compare3.value1" output="multiply2"/>
        <conn input="cull4.booleans" output="compare3"/>
        <conn input="cull4.list" output="multiply2"/>
        <conn input="colorize2.shape" output="rect1"/>
        <conn input="align1.shape" output="colorize1"/>
        <conn input="align2.shape" output="colorize2"/>
        <conn input="combine1.list3" output="align2"/>
        <conn input="rect1.width" output="cull4"/>
        <conn input="rect2.width" output="cull3"/>
        <conn input="cull5.list" output="cull2"/>
        <conn input="cull5.booleans" output="compare3"/>
        <conn input="cull6.list" output="cull2"/>
        <conn input="cull6.booleans" output="compare2"/>
        <conn input="textpath1.text" output="cull5"/>
        <conn input="textpath2.text" output="cull6"/>
        <conn input="combine1.list4" output="textpath2"/>
        <conn input="cull1.booleans" output="compare1"/>
    </node>
</ndbx>
